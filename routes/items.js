const express = require('express');
const router = express.Router();
const Item = require('../models/item');

// ‚ûï –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–¥–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
router.post('/', async (req, res) => {
    try {
        const newItem = new Item(req.body);
        await newItem.save();
        res.status(201).json({ message: 'Item created', item: newItem });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// ‚ûï –î–æ–¥–∞–≤–∞–Ω–Ω—è –±–∞–≥–∞—Ç—å–æ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
router.post('/batch', async (req, res) => {
    try {
        const items = await Item.insertMany(req.body);
        res.status(201).json({ message: 'Items created', items });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// üìñ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ (–∑ –ø—Ä–æ–µ–∫—Ü—ñ—î—é)
router.get('/', async (req, res) => {
    try {
        const items = await Item.find({}, 'name description');
        res.json(items);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// üìù –û–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–¥–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
router.put('/:id', async (req, res) => {
    try {
        const updatedItem = await Item.findByIdAndUpdate(req.params.id, req.body, { new: true });
        if (!updatedItem) return res.status(404).json({ message: 'Item not found' });
        res.json({ message: 'Item updated', item: updatedItem });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// üìù –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–≥–∞—Ç—å–æ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
router.put('/', async (req, res) => {
    try {
        const result = await Item.updateMany(req.body.filter, req.body.update);
        res.json({ message: 'Items updated', result });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// üìù –ü–æ–≤–Ω–∞ –∑–∞–º—ñ–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
router.put('/replace/:id', async (req, res) => {
    try {
        const replacedItem = await Item.findOneAndReplace({ _id: req.params.id }, req.body, { new: true });
        if (!replacedItem) return res.status(404).json({ message: 'Item not found' });
        res.json({ message: 'Item replaced', item: replacedItem });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// ‚ùå –í–∏–¥–∞–ª–µ–Ω–Ω—è –æ–¥–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
router.delete('/:id', async (req, res) => {
    try {
        const deletedItem = await Item.findByIdAndDelete(req.params.id);
        if (!deletedItem) return res.status(404).json({ message: 'Item not found' });
        res.json({ message: 'Item deleted', item: deletedItem });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// ‚ùå –í–∏–¥–∞–ª–µ–Ω–Ω—è –±–∞–≥–∞—Ç—å–æ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
router.delete('/', async (req, res) => {
    try {
        const result = await Item.deleteMany(req.body);
        res.json({ message: 'Items deleted', result });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});


/**
 * üìå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫—É—Ä—Å–æ—Ä—ñ–≤: –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫—É—Ä—Å–æ—Ä–∞
 * URL: GET /items/cursor
 */
router.get('/cursor', async (req, res) => {
    try {
        const cursor = Item.find().cursor();
        let results = [];

        for await (const doc of cursor) {
            results.push(doc);
        }

        res.json(results);
    } catch (error) {
        console.error('‚ùå Error fetching data with cursor:', error);
        res.status(500).json({ error: 'Error fetching data with cursor' });
    }
});

/**
 * üìå –ê–≥—Ä–µ–≥–∞—Ü—ñ–π–Ω–∏–π –∑–∞–ø–∏—Ç: –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö
 * URL: GET /items/stats
 */
router.get('/stats', async (req, res) => {
    try {
        const stats = await Item.aggregate([
            {
                $group: {
                    _id: null,
                    totalItems: { $sum: 1 }, // –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
                    averagePrice: { $avg: '$price' }, // –°–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞
                    maxPrice: { $max: '$price' }, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞
                    minPrice: { $min: '$price' } // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞
                }
            }
        ]);

        res.json(stats[0] || { totalItems: 0, averagePrice: 0, maxPrice: 0, minPrice: 0 });
    } catch (error) {
        console.error('‚ùå Error fetching stats:', error);
        res.status(500).json({ error: 'Error fetching statistics' });
    }
});
module.exports = router;


